AO Programming Language
- - - - - - - - - - - - - - - - - - - - - - - 

The AO (ASM Operands) language is a very low-level assembly language designed for TurnaCore machines. 
It matches 1-to-1 to the equivalent compiled binary machine code. Actually, the only thing it makes is to
convert the "human-readable" TurnaCore instructions into corresponding binary values, which are "CPU-readable".

A program written in AO programming language is a combination of "instructions" and "data". All "instructions" 
and "data" are mere numbers, but the TurnaCore CPU architecture acknowledges certain numbers as built-in 
instructions to execute.

In AO programming language, each "expression" (either an instruction or data) is separated by spaces and
newline characters.

The following is an example AO program:

	= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
	MR1
	1
	MR2
	5
	= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 

In this program, MR1 and MR2 are instructions whereas 1 and 5 are data. MR1 tells the CPU to switch to Modify 
Register 1 mode, and the following data 1 is then used to modify the value of Register 1. Then, the CPU is
switched to Modify Register 2 mode using the MR2 instruction. The last line is the data which is used to 
modify the value of Register 2. When this program is executed, Register 1 should hold the value 1 and Register 2
should hold the value 5.

The same program can be written as follows for better readability:

	= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
	MR1 1
	MR2 5
	= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 

Do not forget that this is not a function - argument arrangement. 1 is not an argument for the MR1 insturction.
They are merely two expressions that come after each other.

You can use the semicolon (;) as the first character in a line to denote a comment line. 

Adding comments to the example program above can be done as follows:

	= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
	; This program sets the value of Register 1 to 1 and Register 2 to 5.
	; Let's set Register 1 first.
	MR1 1
	; Let's set Register 2 next.
	MR2 5
	; Voila!
	= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

"NULL" is a special word in AO language, which stands for the number 0. There is no difference between using
NULL or 0.

	= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
	MR1 NULL
	= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 

is equivalent to 

	= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
	MR1 0
	= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

As you modify a file that includes any of the jump instructions (JMP, JL, JG etc.), you may want to use labels
so that you won't have to count the number of statements by yourself. A label can be defined by putting (:) after
the end of the label name, as such:

	= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
	this_is_a_label:
	= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

Later, when you want to jump to the label, you can simply do the following:

	= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
	JMP this_is_a_label
	= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
	
Sometimes, you would like to use certain constants in your program. These numbers can be defined in a way similar
to the C language's #define. The syntax for defining constants is as follows:

	= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
	#pi=3
	= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
	
The # denotes that this expression is a constant definition. 'pi' is the name of your constant and 3 is the value. Please note that
spaces are NOT allowed. 

After defining a constant, you can use it anywhere in your code by simply typing its name. For example, if you want to 
see whether pi is larger than the value in Register 2 and jump to a label if so, you can write the following:

	= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
	MR1 pi
	JG some_label_defined_somewhere_else
	= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
	
Since we defined the value of pi as 3, this is esentially the same thing as writing:

	= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
	MR1 3
	JG some_label_defined_somewhere_else
	= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

AO files are compiled into CIS (compiled instruction sequence) files. These are the files which the CPU reads.

See TurnaCore Instruction Set for a list of all instructions.
